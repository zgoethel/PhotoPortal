@page "/s/{Token}"

@using PhotoPortal.Shared
@inject IJSRuntime js
@inject NavigationManager nav
@inject IEnumerable<HttpClient> _http

@code {
    private HttpClient http => _http.FirstOrDefault();
}

@if (loading)
{
    <div class="d-flex"
        style="position: fixed;left: 0;top: 0;
               width: 100vw;height: 100vh;
               z-index: 9999;background: #69696969;">
        <div class="d-flex m-auto bg-white shadow rounded p-3">

            <div class="spinner-border mb-0" role="status">
            </div>

        </div>
    </div>
}

<div class="d-flex flex-column align-items-center mb-4">

    <h3 style="font-family: 'Croissant One', cursive;
               color: #990039;">
        get ready for
    </h3>

    <h2 style="font-family: 'Times New Roman', Times, serif;
               font-size: 36pt;">
        A NEW SOLIE!
    </h2>

</div>

<div class="d-flex flex-column gap-3 p-3 shadow mb-3"
     style="background: #ffffffc0;
            border-top: 3px double #990039;">

    <p>Leave a note for the Solies and take some fun pictures.</p>

    <div class="d-block">
        <label for="name">Enter your name:<i class="text-danger">*</i></label>
        <input type="text" maxlength="150"
            class="form-control border border-dark shadow-sm"
            @bind="@dto.From" @bind:event="oninput" />
    </div>

    <div class="d-block">
        <label for="name">Leave a note <i>(optional)</i>:</label>
        <textarea rows="4" maxlength="10000"
            placeholder="Congratulations!"
            class="form-control border border-dark shadow-sm"
            
            @bind="@dto.Message">

        </textarea>
    </div>

</div>

@foreach (var (file, i) in files
    .Take(dto.NumAttachments + 1)
    .Select((it, i) => (it, i)))
{
    var fileStyle = i == dto.NumAttachments ? "" : "display: none !important;";

    <div class="d-flex flex-row gap-2 mb-3" style="@fileStyle">

        <label for="fileInput" class="btn btn-outline-secondary flex-grow-1 flex-shrink-1">
        
            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-cloud-upload" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M4.406 1.342A5.53 5.53 0 0 1 8 0c2.69 0 4.923 2 5.166 4.579C14.758 4.804 16 6.137 16 7.773 16 9.569 14.502 11 12.687 11H10a.5.5 0 0 1 0-1h2.688C13.979 10 15 8.988 15 7.773c0-1.216-1.02-2.228-2.313-2.228h-.5v-.5C12.188 2.825 10.328 1 8 1a4.53 4.53 0 0 0-2.941 1.1c-.757.652-1.153 1.438-1.153 2.055v.448l-.445.049C2.064 4.805 1 5.952 1 7.318 1 8.785 2.23 10 3.781 10H6a.5.5 0 0 1 0 1H3.781C1.708 11 0 9.366 0 7.318c0-1.763 1.266-3.223 2.942-3.593.143-.863.698-1.723 1.464-2.383" />
                <path fill-rule="evenodd" d="M7.646 4.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V14.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708z" />
            </svg>

        </label>

        <InputFile name="fileInput" id="fileInput"
            class="d-none" 
            type="file"
            OnChange="@HandleFileUpload"/>

        @if (supportsCapture)
        {

            <label for="cameraInput" class="btn btn-outline-secondary flex-grow-1 flex-shrink-1">
            
                <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-camera" viewBox="0 0 16 16">
                    <path d="M15 12a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V6a1 1 0 0 1 1-1h1.172a3 3 0 0 0 2.12-.879l.83-.828A1 1 0 0 1 6.827 3h2.344a1 1 0 0 1 .707.293l.828.828A3 3 0 0 0 12.828 5H14a1 1 0 0 1 1 1zM2 4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-1.172a2 2 0 0 1-1.414-.586l-.828-.828A2 2 0 0 0 9.172 2H6.828a2 2 0 0 0-1.414.586l-.828.828A2 2 0 0 1 3.172 4z" />
                    <path d="M8 11a2.5 2.5 0 1 1 0-5 2.5 2.5 0 0 1 0 5m0 1a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7M3 6.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0" />
                </svg>

            </label>

            <InputFile name="cameraInput" id="cameraInput"
                class="d-none" 
                type="file" accept="image/*" capture="user"
                OnChange="@HandleFileUpload" />

        }

    </div>

    if (files[i] is not null)
    {
        
        <div class="alert alert-secondary">File attached!</div>

    }
}

<button class="btn btn-primary mb-3 p-3 w-100"
    style="background: #57b6c1;border: 1px solid #990039;"
    type="button"
    disabled="@(string.IsNullOrEmpty(dto.From))"
    @onclick="@SubmitForm">

    Send

</button>

<div class="d-flex flex-column gap-2 align-items-center mb-3"
    style="font-size: 12pt;color: #990039;">

    <span>&mdash;</span>

    <span class="">
        Solie Baby Shower Guestbook, <span style="font-weight: 500;">2025</span>
    </span>

</div>

@code {
    [Parameter]
    public string Token { get; set; }

    private bool supportsCapture;
    private bool loading = true;
    private Submission.WithFiles dto = new();
    private IBrowserFile[] files = [null, null, null, null, null];

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            supportsCapture = await js.InvokeAsync<bool>("window.supportsCaptureTag");
        } catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs ev)
    {
        if (ev.File.Size > 20_000_000)
        {
            await js.InvokeVoidAsync("alert", "Maximum 20 MB attachment size");
            return;
        }

        loading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            using var stream = new MemoryStream();
            using var fileIn = ev.File.OpenReadStream(maxAllowedSize: 20_000_000);

            await fileIn.CopyToAsync(stream);
            stream.Position = 0L;

            dto.FileContents.Add(new()
            {
                OriginalName = ev.File.Name,
                Base64 = Convert.ToBase64String(stream.ToArray())
            });
        } catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            await js.InvokeVoidAsync("alert", $"Failed to read the file: '{ex.Message}'");
        } finally
        {
            loading = false;
        }

        files[dto.NumAttachments++] = ev.File;
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            loading = false;
            StateHasChanged();
        }
    }

    private async Task SubmitForm()
    {
        if (string.IsNullOrEmpty(dto.Message))
        {
            dto.Message = "Congratulations!";
        }
        dto.Submitted = DateTime.UtcNow;

        loading = true;
        await InvokeAsync(StateHasChanged);

        await Task.Delay(100);

        var response = await http.PostAsJsonAsync($"./Submit?token={System.Web.HttpUtility.UrlEncode(Token)}", dto);
        try
        {
            response.EnsureSuccessStatusCode();

            nav.NavigateTo("thanks");
        } catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            await js.InvokeVoidAsync("alert", $"Failed to submit the form: '{ex.Message}'");
        } finally
        {
            loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
