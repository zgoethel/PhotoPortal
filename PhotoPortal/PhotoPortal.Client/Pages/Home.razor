@page "/"

@using Microsoft.AspNetCore.Components.Authorization
@using PhotoPortal.Shared
@inject IEnumerable<HttpClient> _http
@inject IJSRuntime js

@code {
    private HttpClient http => _http.FirstOrDefault();
}

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
    
        <div class="d-flex flex-column align-items-center mb-4">

            <h3 style="font-family: 'Croissant One', cursive;
                       color: #990039;">
                get ready for
            </h3>

            <h2 style="font-family: 'Times New Roman', Times, serif;
                       font-size: 36pt;">
                A NEW SOLIE!
            </h2>

        </div>

        <div class="d-flex flex-column p-3 shadow shadow-dark mb-3"
             style="background: #ffffffc0;
                    border-top: 3px double #990039;">

            @foreach (var response in responses)
            {
                <h4><strong>From:</strong> @response.From</h4>
                <p><strong>Submitted:</strong> @response.Submitted.ToLocalTime().ToShortDateString() @response.Submitted.ToLocalTime().ToShortTimeString()</p>
                
                <p>@((MarkupString)System.Web.HttpUtility.HtmlEncode(response.Message).Replace("\n", "<br />"))</p>

                <div class="d-flex flex-row gap-2 flex-wrap align-items-center justify-items-center mb-4">

                    @foreach (var image in response.ImagePaths)
                    {
                        <img class="mb-2" style="max-width: 45vw;" src="@image" />
                    }

                </div>
            }

        </div>

    </Authorized>
    <NotAuthorized>

        <Login />

    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    private List<Submission.AdminView> responses = [];
    private bool dataLoaded;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if ((await AuthState)?.User?.Identity?.IsAuthenticated == true
            && !dataLoaded)
        {
            dataLoaded = true;

            var response = await http.GetAsync($"./Submission/ListResponses?read=");
            try
            {
                response.EnsureSuccessStatusCode();

                responses = await response.Content.ReadFromJsonAsync<List<Submission.AdminView>>();
            } catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
                await js.InvokeVoidAsync("alert", $"Failed to submit the form: '{ex.Message}'");
            } finally
            {
                await InvokeAsync(StateHasChanged);
            }
        }
    }
}